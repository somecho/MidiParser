#pragma once

#include <cstdint>
#include <string>

namespace MidiParser {

enum class State {
  NEW,
  HEADER_ID_FOUND,
  FIXED_LENGTH_FOUND,
  FILE_FORMAT_FOUND,
  NUM_TRACKS_FOUND,
  HEADER_CHUNK_READ,
  TRACK_ID_FOUND,
  READING_VARIABLE_TIME,
  VARIABLE_TIME_READ,
  META_FOUND,
  META_SEQUENCE_NUMBER_FOUND,
  META_TEXT_FOUND,
  META_COPYRIGHT_NOTICE_FOUND,
  META_TRACK_NAME_FOUND,
  META_INSTRUMENT_NAME_FOUND,
  META_LYRIC_FOUND,
  META_MARKER_FOUND,
  META_CUE_FOUND,
  META_CHANNEL_PREFIX_FOUND,
  END_OF_TRACK_FOUND,
  META_SET_TEMPO_FOUND,
  META_SMPTE_OFFSET_FOUND,
  META_TIME_SIGNATURE_FOUND,
  META_KEY_SIGNATURE_FOUND,
  EVENT_READ,
  TRACK_READ,
  MIDI_FOUND,
  FINISHED,
};

enum class Event : uint8_t {
  SEQUENCE_NUMBER = 0x00,
  TEXT = 0x01,
  COPYRIGHT_NOTICE = 0x02,
  TRACK_NAME = 0x03,
  INSTRUMENT_NAME = 0x04,
  LYRIC = 0x05,
  MARKER = 0x06,
  CUE = 0x07,
  CHANNEl_PREFIX = 0x20,
  END_OF_TRACK = 0x2F,
  SET_TEMPO = 0x51,
  SMPTE_OFFSET = 0x54,
  TIME_SIGNATURE = 0x58,
  KEY_SIGNATURE = 0x59,
  IDENTIFIER,
  FIXED_LENGTH,
  FILE_FORMAT,
  NUM_TRACKS,
  TICKS,
  VARIABLE_TIME,
  META_TYPE,
  NO_OP,
  MIDI,
  MIDI_NOTE_OFF = 0b10000000,
  MIDI_NOTE_ON = 0b10010000,
  MIDI_POLY_AFTERTOUCH = 0b10100000,
  MIDI_CONTROL_CHANGE = 0b10110000,
  MIDI_PROGRAM_CHANGE = 0b11000000,
  MIDI_AFTERTOUCH = 0b11010000,
  MIDI_PITCH_BEND = 0b11100000,
};

std::string toString(MidiParser::State s);
std::string toString(Event e);

}  // namespace MidiParser
